<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Applicaiton Context on Rimon&#39;s Weblog</title>
    <link>https://rimonmostafiz.com/tags/applicaiton-context/</link>
    <description>Recent content in Applicaiton Context on Rimon&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 15 Mar 2018 11:00:47 +0000</lastBuildDate>
    
	<atom:link href="https://rimonmostafiz.com/tags/applicaiton-context/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Spring IoC Container</title>
      <link>https://rimonmostafiz.com/blog/the-spring-ioc-container/</link>
      <pubDate>Thu, 15 Mar 2018 11:00:47 +0000</pubDate>
      
      <guid>https://rimonmostafiz.com/blog/the-spring-ioc-container/</guid>
      <description>Overview There is some confusion these days over the meaning of inversion of control due to the rise of _IoC containers. _An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC).
Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use. It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.</description>
    </item>
    
  </channel>
</rss>