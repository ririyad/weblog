<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beans on Rimon&#39;s Weblog</title>
    <link>http://example.org/tags/beans/</link>
    <description>Recent content in Beans on Rimon&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 May 2018 06:42:47 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/beans/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Application Context and Configuration Metadata</title>
      <link>http://example.org/posts/spring-application-context-and-configuration-metadata/</link>
      <pubDate>Sat, 26 May 2018 06:42:47 +0000</pubDate>
      
      <guid>http://example.org/posts/spring-application-context-and-configuration-metadata/</guid>
      <description>In the last post of Spring Diary, we discussed the basics of spring IoC Container and we saw a high-level view of how Spring Container works.
In this post, we will learn about how can we Instantiate a Spring IoC container(using ApplicaitonContext Interface) and configure that container using configuration metadata.
Spring IoC container consumes a form of _configuration metadata. _This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.</description>
    </item>
    
    <item>
      <title>The Spring IoC Container</title>
      <link>http://example.org/posts/the-spring-ioc-container/</link>
      <pubDate>Thu, 15 Mar 2018 11:00:47 +0000</pubDate>
      
      <guid>http://example.org/posts/the-spring-ioc-container/</guid>
      <description>Overview There is some confusion these days over the meaning of inversion of control due to the rise of _IoC containers. _An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC).
Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use. It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.</description>
    </item>
    
  </channel>
</rss>