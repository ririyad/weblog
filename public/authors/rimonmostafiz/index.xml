<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rimonmostafiz on ~/dev/rimon</title>
    <link>/authors/rimonmostafiz/</link>
    <description>Recent content in Rimonmostafiz on ~/dev/rimon</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© Creative Commons Attribution-ShareAlike 4.0 International License</copyright>
    <lastBuildDate>Fri, 27 Jul 2018 20:01:41 +0600</lastBuildDate>
    
	<atom:link href="/authors/rimonmostafiz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goodbye Wordpress, Welcome to HUGO</title>
      <link>/posts/goodbye-wordpress-welcome-to-hugo/</link>
      <pubDate>Fri, 27 Jul 2018 20:01:41 +0600</pubDate>
      
      <guid>/posts/goodbye-wordpress-welcome-to-hugo/</guid>
      <description>Do you notice anything new? Of course not. No one follows my blog and theme does not matter. 😒
A weeks ago, I moved this site over from WordPress to HUGO(a static site generator). Also its now hosted to Netlify(🆓)
This is my attempt to making everything more simple and content-focused. In this post, I will talk about some of my reasons for switching away from WordPress to a static site generator.</description>
    </item>
    
    <item>
      <title>Install and Manage Node Js Using NVM</title>
      <link>/posts/install-and-manage-node-js-using-nvm/</link>
      <pubDate>Sat, 07 Jul 2018 04:17:09 +0000</pubDate>
      
      <guid>/posts/install-and-manage-node-js-using-nvm/</guid>
      <description>Node Version Manager (NVM) is a simple bash script to manage multiple active node.js versions.
Install NVM To install or update nvm, you can use the install script using cURL or Wget
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash $ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash  The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc,~/.profile, or ~/.bashrc).
export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot; [ -s &amp;quot;$NVM_DIR/nvm.</description>
    </item>
    
    <item>
      <title>Spring Bean Wiring Using JavaConfig</title>
      <link>/posts/spring-bean-wiring-using-javaconfig/</link>
      <pubDate>Tue, 29 May 2018 10:19:29 +0000</pubDate>
      
      <guid>/posts/spring-bean-wiring-using-javaconfig/</guid>
      <description>In the previous post, I wrote about how can we implicitly wire beans automatically in Spring container. In my previous post I created a new maven project and started writing code so that we can understand the topics more clearly. In this post, I am documenting my learning of how we can wire bean using Explicit Java Configuration. I will work on the same project I have created earlier.</description>
    </item>
    
    <item>
      <title>Auto Bean Wiring of Spring</title>
      <link>/posts/auto-bean-wiring-of-spring/</link>
      <pubDate>Mon, 28 May 2018 07:44:03 +0000</pubDate>
      
      <guid>/posts/auto-bean-wiring-of-spring/</guid>
      <description>As we previously discussed that the Spring container is responsible for creating the beans in your application and coordinating the relationship between those objects vi DI. The act of creating these associations between application objects in the essence of dependency injection(DI) and is commonly referred to as wiring.
Different Types of Bean Wiring Spring Offers three primary wiring mechanism
 An explicit configuration in XML An explicit configuration in Java An Implicit bean discovery and automatic wiring  In this post, I am going to write notes about Spring&amp;rsquo;s automatic wiring, I will write about the other two in later posts.</description>
    </item>
    
    <item>
      <title>Spring Application Context and Configuration Metadata</title>
      <link>/posts/spring-application-context-and-configuration-metadata/</link>
      <pubDate>Sat, 26 May 2018 06:42:47 +0000</pubDate>
      
      <guid>/posts/spring-application-context-and-configuration-metadata/</guid>
      <description>In the last post of Spring Diary, we discussed the basics of spring IoC Container and we saw a high-level view of how Spring Container works.
In this post, we will learn about how can we Instantiate a Spring IoC container(using ApplicaitonContext Interface) and configure that container using configuration metadata.
Spring IoC container consumes a form of configuration metadata. This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.</description>
    </item>
    
    <item>
      <title>The Spring IoC Container</title>
      <link>/posts/the-spring-ioc-container/</link>
      <pubDate>Thu, 15 Mar 2018 11:00:47 +0000</pubDate>
      
      <guid>/posts/the-spring-ioc-container/</guid>
      <description>Overview There is some confusion these days over the meaning of inversion of control due to the rise of IoC containers.
An IoC container is a common characteristic of frameworks that implement Inversion of Control (IoC).
Some people confuse the general principle here with the specific styles of inversion of control (such as dependency injection) that these containers use. It is a process whereby objects define their dependencies, that is, the other objects they work with, only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.</description>
    </item>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/posts/inversion-of-control-and-dependency-injection/</link>
      <pubDate>Wed, 14 Mar 2018 10:36:12 +0000</pubDate>
      
      <guid>/posts/inversion-of-control-and-dependency-injection/</guid>
      <description>Inversion of control (IoC) In software engineering, inversion of control (IoC) is a design principle. It is used to invert different kinds of controls. More Specifically invert the control of your custom written program or objects of a program is transferred to a container or framework.
In traditional programming, our custom code that expresses the purpose of the program calls reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.</description>
    </item>
    
    <item>
      <title>Know Your Response Object</title>
      <link>/posts/know-your-response-object/</link>
      <pubDate>Tue, 09 Jan 2018 06:30:00 +0000</pubDate>
      
      <guid>/posts/know-your-response-object/</guid>
      <description>HttpServletResponse The HttpServletResponse interface extends ServletResponse and provides access to the HTTP protocol-specific properties of a response.
You can use the response object to do things such as
 Set response headers Write to the response body Redirect the request Set the HTTP status code Send cookies back to the client.  Writing to Response Body The most common thing you’ll do with a response object is written content to the response body.</description>
    </item>
    
    <item>
      <title>Know Your Request Object</title>
      <link>/posts/know-your-request-object/</link>
      <pubDate>Wed, 13 Dec 2017 05:30:10 +0000</pubDate>
      
      <guid>/posts/know-your-request-object/</guid>
      <description>HTTPServletRequest The HServletRequestttp interface is an extension of ServletRequest that provides additional HTTP protocol-specific information about a received request. It specifies dozens of methods that you can use to obtain details about an HTTP request. It also permits you to set request attributes (different from request parameters).
Request Param Request parameters come in two different forms:
 Query parameters (also called URI parameters) An application/x-www-form-urlencoded or multipart/form-data encoded request body(typically called post variables or form variables).</description>
    </item>
    
    <item>
      <title>Git Notes</title>
      <link>/posts/git-notes/</link>
      <pubDate>Thu, 17 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>/posts/git-notes/</guid>
      <description>Git cheat sheet for everyday life. Will update this in future&amp;hellip;
$ git init # transform the current directory into a Git repository. This adds a .git folder to the current directory and makes it possible to start recording revisions $ git config --global user.email &amp;quot;you@example.com&amp;quot; $ git config --global user.name &amp;quot;Your Name&amp;quot; $ git config --global color.status auto $ git config --global color.diff auto $ git config --global color.branch auto $ git clone &amp;lt;git host&amp;gt;:/repo/&amp;lt;project name&amp;gt;.</description>
    </item>
    
    <item>
      <title>Google Drive in Ubuntu</title>
      <link>/posts/google-drive-in-ubuntu/</link>
      <pubDate>Wed, 16 Aug 2017 22:00:00 +0000</pubDate>
      
      <guid>/posts/google-drive-in-ubuntu/</guid>
      <description>At the time of writing, there is no official Google Drive client for Ubuntu or Linux Mint but if you need to use it then there is an unofficial client called Grive2. Grive is a Google Drive client for GNU/Linux systems. It allows the synchronization of all your files on the cloud with a directory of your choice and the upload of new files to Google Drive.
Those of you used Google Drive client on Windows or Mac, Grive2 will do the same for you in Ubuntu or Linux Mint.</description>
    </item>
    
    <item>
      <title>Sieve Of Eratosthenes (Memory Efficient Implementation)</title>
      <link>/posts/sieve-of-eratosthenes-memory-efficient-implementation/</link>
      <pubDate>Wed, 16 Aug 2017 00:30:00 +0000</pubDate>
      
      <guid>/posts/sieve-of-eratosthenes-memory-efficient-implementation/</guid>
      <description>Say we want to find all prime numbers up to an integer N where N is 108. If we write a regular implementation of Sieve Of Eratosthenes using a bool array for each integer in the range [1:N] then we could end up using N bytes of memory, which would roughly be 95 MB which is a not a very small memory.
Lets see how can we reduce the memory, the main idea here is we can store a Boolean value in a single bit, so we can store 8 Boolean values in a single byte.</description>
    </item>
    
    <item>
      <title>Least Common Multiple (LCM)</title>
      <link>/posts/least-common-multiple-lcm/</link>
      <pubDate>Tue, 15 Aug 2017 18:00:00 +0000</pubDate>
      
      <guid>/posts/least-common-multiple-lcm/</guid>
      <description>Least Common Multiple (LCM) of two number a and b is the smallest positive integer that is divisible by both a and b. Since division of integers by zero is undefined, this definition has meaning only if a and b are both different from zero.
int lcm(int a, int b) { for ( int i = 1; ; i ) { if ( i % a == 0 &amp;amp;&amp;amp; i % b == 0 ) { return i; } } }  There is an another technique for LCM finding called Reduction by the greatest common divisor</description>
    </item>
    
    <item>
      <title>Greatest Common Divisor (GCD)</title>
      <link>/posts/greatest-common-divisor-gcd/</link>
      <pubDate>Tue, 15 Aug 2017 16:00:00 +0000</pubDate>
      
      <guid>/posts/greatest-common-divisor-gcd/</guid>
      <description>Greatest Common Divisor (GCD) of two number a and b is the largest number that divides both a and b evenly.
if g = gcd(a, b), then g divides both a and b when at least one of them is non zero.
when gcd(a, b) == 1 then we said a and b is co-prime or relatively prime numbers.
int gcd (int a, int b) { int g; for (int i = 1; i &amp;lt;= min(a, b); i++) { if (a%i == 0 &amp;amp;&amp;amp; b%i == 0) { g = i; } } return g; }  Now there is a much more efficient algorithm for finding GCD which is called Subtraction-based Euclidean algorithm.</description>
    </item>
    
    <item>
      <title>WhoAmI</title>
      <link>/pages/whoami/</link>
      <pubDate>Tue, 15 Aug 2017 15:31:05 +0000</pubDate>
      
      <guid>/pages/whoami/</guid>
      <description>It is not our abilities that show what we truly are, It is our choices.
 Welcome, Thanks for stopping by 👍 rimonmostafiz.com is the personal and professional blog of Molla Mostafizur Rahman Rimon (Rimon Mostafiz in short).
✏️ Education I graduated from Department of Computer Science and Engineering at United International University (UIU), Bangladesh in 2016.
🏢 Work Currently working as
 Software Engineer at Tiger IT Bangladesh Limited [December, 2016 - Present].</description>
    </item>
    
  </channel>
</rss>