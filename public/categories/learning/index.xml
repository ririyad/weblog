<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning on /dev/rimon/weblog</title>
    <link>/categories/learning/</link>
    <description>Recent content in Learning on /dev/rimon/weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© Creative Commons Attribution-ShareAlike 4.0 International License</copyright>
    <lastBuildDate>Wed, 14 Mar 2018 10:36:12 +0000</lastBuildDate>
    
	<atom:link href="/categories/learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/blog/inversion-of-control-and-dependency-injection/</link>
      <pubDate>Wed, 14 Mar 2018 10:36:12 +0000</pubDate>
      
      <guid>/blog/inversion-of-control-and-dependency-injection/</guid>
      <description>Inversion of control (IoC) In software engineering, inversion of control (IoC) is a design principle. It is used to invert different kinds of controls. More Specifically invert the control of your custom written program or objects of a program is transferred to a container or framework.
In traditional programming, our custom code that expresses the purpose of the program calls reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.</description>
    </item>
    
    <item>
      <title>Know Your Response Object</title>
      <link>/blog/know-your-response-object/</link>
      <pubDate>Tue, 09 Jan 2018 06:30:00 +0000</pubDate>
      
      <guid>/blog/know-your-response-object/</guid>
      <description>HttpServletResponse The HttpServletResponse interface extends ServletResponse and provides access to the HTTP protocol-specific properties of a response.
You can use the response object to do things such as
 Set response headers
 Write to the response body
 Redirect the request
 Set the HTTP status code
 Send cookies back to the client.
  Writing to Response Body The most common thing you’ll do with a response object is written content to the response body.</description>
    </item>
    
    <item>
      <title>Know Your Request Object</title>
      <link>/blog/know-your-request-object/</link>
      <pubDate>Wed, 13 Dec 2017 05:30:10 +0000</pubDate>
      
      <guid>/blog/know-your-request-object/</guid>
      <description>HTTPServletRequest The HServletRequestttp interface is an extension of ServletRequest that provides additional HTTP protocol-specific information about a received request. It specifies dozens of methods that you can use to obtain details about an HTTP request. It also permits you to set request attributes (different from request parameters).
Request Param Request parameters come in two different forms:
 Query parameters (also called URI parameters)
 An application/x-www-form-urlencoded or multipart/form-data encoded request body(typically called post variables or form variables).</description>
    </item>
    
    <item>
      <title>Up and Running With Servlet in Tomcat</title>
      <link>/blog/up-and-running-with-servlet-in-tomcat/</link>
      <pubDate>Tue, 12 Dec 2017 16:57:27 +0000</pubDate>
      
      <guid>/blog/up-and-running-with-servlet-in-tomcat/</guid>
      <description>Up and Running With Servlet in Tomcat Companion Video https://youtu.be/lTyAPWR6104
First, let&amp;rsquo;s create a maven project and add the dependency. As a prerequisite, JDK 8 will be needed. If you are using Linux based operating system then I have written a post on how to install and manage different versions of JDK in your system. You can visit this post if JDK 8 is not installed on your system.</description>
    </item>
    
    <item>
      <title>Web Application Directory Structure and WAR Files</title>
      <link>/blog/web-application-directory-structure-and-war-files/</link>
      <pubDate>Tue, 12 Dec 2017 11:30:40 +0000</pubDate>
      
      <guid>/blog/web-application-directory-structure-and-war-files/</guid>
      <description>Directory Structure and WAR Files Standard Java EE web applications are deployed as WAR files or “exploded” (unarchived) web application directories. All Java EE web application servers support WAR file application archives. Whether archived or exploded, the directory structure convention, as shown in Figure is the same.
 This structure contains classes and other application resources, the class files live in /WEB-INF/classes. The WEB-INF directory stores informational and instructional files that Java EE web application servers use to determine how to deploy and run the application.</description>
    </item>
    
    <item>
      <title>Basic Web Application Structure of JavaEE</title>
      <link>/blog/basic-web-application-structure-of-javaee/</link>
      <pubDate>Tue, 12 Dec 2017 10:08:51 +0000</pubDate>
      
      <guid>/blog/basic-web-application-structure-of-javaee/</guid>
      <description>Basic Web Application Structure A lot of components go into making a Java EE application.
 Application Code and Third Party Libraries it depends on
 Deployment Descriptor, which includes instructions for deploying and starting the application
 ClassLoders which is responsible for isolating your application form other web applications on the same server
 Finally the WAR and EAR files
  Servlets, Filters, Listeners, and JSPs  Servlets are a key component of any Java EE applications.</description>
    </item>
    
    <item>
      <title>a bit of spring: part one</title>
      <link>/blog/a-bit-of-spring-part-one/</link>
      <pubDate>Mon, 30 Oct 2017 09:19:54 +0000</pubDate>
      
      <guid>/blog/a-bit-of-spring-part-one/</guid>
      <description>Spring MVC Java Configuration Hi All, This _should_ be the first in a series of &amp;ldquo;Rimon learns Spring&amp;rdquo; type blog posts I plan on writing as I learn bits of Spring. I am just documenting my learnings, not advising others based on what I&amp;rsquo;ve learned.
Spring traditionally supports two types of configurations:
 XML based configuration
 Annotation-based configuration
  This post is about a bare minimum annotation-based configuration of spring MVC.</description>
    </item>
    
  </channel>
</rss>